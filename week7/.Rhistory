density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "blue", lwd = 3, xlab = "")
#Exercise 1: Create cdf of exponential distribution
#Step 1: Generate uniform distribution U[0,1] random variable
u <- runif(10000,0,1)
#Step 2: Construct pdf
##Approach 1: Use the fact that we can transform a uniform distribution U[0,1] random variable by the inverse of a cdf and get a random variable with that cdf
#We know the if Y is an exponential distribution RV, x = F(y) = 1 - e^(-lambda * y). Hence, the inverse function of cdf is y = - log(1-x)/ lambda. Since X and 1-X has the same distribution, we can write Y = -log(X)/lambda.
#Define the inverse cdf.Note that X is a random variable from uniform distribution u
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
rm(list = ls())
u <- runif(10000,0,1)
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
density_y <- density(y)
pdf("exponential.pdf")
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
hide <- dev.off()
#Exercise 1: Create cdf of exponential distribution
rm(list = ls())
#Step 1: Generate uniform distribution U[0,1] random variable
u <- runif(10000,0,1)
#Step 2: Construct pdf
##Approach 1: Use the fact that we can transform a uniform distribution U[0,1] random variable by the inverse of a cdf and get a random variable with that cdf
#We know the if Y is an exponential distribution RV, x = F(y) = 1 - e^(-lambda * y). Hence, the inverse function of cdf is y = - log(1-x)/ lambda. Since X and 1-X has the same distribution, we can write Y = -log(X)/lambda.
#Define the inverse cdf.Note that X is a random variable from uniform distribution u
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
hide <- dev.off()
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "yellow", lwd = 3, xlab = "")
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
hide <- dev.off()
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "blue", lwd = 3, xlab = "")
#Exercise 1: Create cdf of exponential distribution
rm(list = ls())
#Step 1: Generate uniform distribution U[0,1] random variable
u <- runif(10000,0,1)
#Step 2: Construct pdf
##Approach 1: Use the fact that we can transform a uniform distribution U[0,1] random variable by the inverse of a cdf and get a random variable with that cdf
#We know the if Y is an exponential distribution RV, x = F(y) = 1 - e^(-lambda * y). Hence, the inverse function of cdf is y = - log(1-x)/ lambda. Since X and 1-X has the same distribution, we can write Y = -log(X)/lambda.
#Define the inverse cdf.Note that X is a random variable from uniform distribution u
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
hide <- dev.off()
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "blue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
hide <- dev.off()
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "yellow", lwd = 3, xlab = "")
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
hide <- dev.off()
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
hide <- dev.off()
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", fill = rgb(1,0,0.5,0.8), lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = rgb(1,0,0.5,0.8), lwd = 3, xlab = "")
?dhyper
dhyper(5,13,39,10)
?pexp
?dnorm
v <- rnorm(1000,3,0.25)
dnorm(0,0,0.5)
pnorm(1.96,0,1)
qnorm(0.975,0,1)
qnorm(0.975,lower.tail = FALSE)
qnorm(0.975,0,1)
y_qnorm <- qnorm(u)
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
plot(density_y_qnorm, type = "l", xlim = c(0,2), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(0,2), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.3,0.5,0.4,0.8), lwd = 3, xlab = "")
y_rnorm <- rnorm(10000,0,1)
density_y_rnorm <- density(y_rnorm, bw = 1)
pdf("random_norma.pdf")
hide <- dev.off()
plot(density_y_rnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution from random draw", col = rgb(0.4,0.5,0.8,0.7), lwd = 3, xlab = "")
?sum
(0.731+0.750+0.893+0.692)/4-(0.462+0.571+0.923+0.333)/4
install.packages("perm")
library(perm)
rm(list = ls())
setwd("/Users/nguyetanh/Documents/MITx-14.310x/week7/")
?chooseMatrix
read.csv("/Users/nguyetanh/Documents/MITx-14.310x/week7/teacher_data.csv")
read.csv("/Users/nguyetanh/Documents/MITx-14.310x/week7/teacher_final.csv")
read.csv("C://Users//nguyetanh//Documents//MITx-14.310x//week7//teacher_final.csv")
read.csv("C://Users//nguyetanh//Documents//MITx-14.310x//week7//teachers_final.csv")
data_ps8 <- read.csv("C://Users//nguyetanh//Documents//MITx-14.310x//week7//teachers_final.csv")
str(data_ps8)
#install.packages('perm')
install.packages("perm")
library(perm)
rm(list = ls())
setwd("/Users/nguyetanh/Documents/MITx-14.310x/week7/")
data_ps8 <- read.csv("C://Users//nguyetanh//Documents//MITx-14.310x//week7//teachers_final.csv")
?chooseMatrix
?chooseMatrix
?chooseMatrix()
perms <- chooseMatrix(8,2)
?byrow
?matrix
matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1)
matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=FALSE)
matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=4, ncol=2, byrow=FALSE)
matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=4, ncol=2, byrow=TRUE)
?%*%
?choose
library(perm)
library("perm")
install.packages("perm")
library(perm)
rm(list = ls())
setwd("/Users/nguyetanh/Documents/MITx-14.310x/week7/")
data_ps8 <- read.csv("C://Users//nguyetanh//Documents//MITx-14.310x//week7//teachers_final.csv")
chooseMatrix(2,3)
chooseMatrix(8,4)
chooseMatrix(3,4)
chooseMatrix(3,2)
chooseMatrix(4,3)
chooseMatrix(4,1)
chooseMatrix(8,1)
chooseMatrix(8,4)
dim(chooseMatrix(8,4))
perms <- chooseMatrix(8,4)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
A
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
x <- chooseMatrix(4,2)
x
y <- matrix(c(1,2,3,4), nrow = 4, ncol = 1, byrow = TRUE)
y
x%*%y
perms
?chooseMatrix
test_statistic <- abs(treatment_avg-control_avg)
?apply
rownumber <- apply(apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))), 2, sum)
apply(perms, 1, function (x) (x == c(0,1,0,0,0,1,1,1)))
apply(apply(perms, 1, function (x) (x == c(0,1,0,0,0,1,1,1))),2,sum)
apply(perms, 1, function (x) (x == c(0,1,0,0,0,1,1,1)))
perms
apply(perms, 2, function (x) (x == c(0,1,0,0,0,1,1,1)))
apply(perms, 1, function (x) (x == c(0,1,0,0,0,1,1,1)))
perms
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))), 2, sum)
apply(perms, 1, function (x) (x == c(0,1,0,0,0,1,1,1)))
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))), 2, sum)
rownumber
rownumber <- (rownumber == 8)
rownumber
test_statistic
observed_test <- test_statistic[rownumber == TRUE]
observed_test
larger_than_observed <- (test_statistic >= observed_test)
larger_than_observed
sum(larger_than_observed)
16/70
simul_stat <- as.vector(NULL)
simul_stat
?as.vector
schools <- read.csv('teachers_final.csv')
set.seed(1001)
?set.seed
set.seed(1001)
set.seed(1001)
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
set.seed(1001)
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
ate <- actual_stat
ate
s_c <- (1/(sum(schools$control)-1))*sum(((schools$open-control_mean)*schools$control)^2)
s_t <- (1/(sum(schools$treatment)-1))*sum(((schools$open-treatment_mean)*schools$treatment)^2)
Vneyman <- (s_c/sum(schools$control) + s_t/sum(schools$treatment))
print(sqrt(Vneyman))
print(actual_stat/sqrt(Vneyman))
print(actual_stat-1.96*sqrt(Vneyman))
control_mean <- sum(schools$control*schools$open)/sum(schools$control)
treatment_mean <- sum(schools$treatment*schools$open)/sum(schools$treatment)
s_c <- (1/(sum(schools$control)-1))*sum(((schools$open-control_mean)*schools$control)^2)
s_t <- (1/(sum(schools$treatment)-1))*sum(((schools$open-treatment_mean)*schools$treatment)^2)
Vneyman <- (s_c/sum(schools$control) + s_t/sum(schools$treatment))
print(sqrt(Vneyman))
print(actual_stat/sqrt(Vneyman))
print(actual_stat-1.96*sqrt(Vneyman))
print(actual_stat+1.96*sqrt(Vneyman))
print(actual_stat/sqrt(Vneyman))
print(sqrt(Vneyman))
actual_stat
actual_stat/sqrt(Vneyman)
print(actual_stat/sqrt(Vneyman))
str(schools)
dim(schools)
actual_stat/2
actual_stat
?qnorm
qnorm(0.025)
qnorm(0.9)
print(sqrt(Vneyman))
2*sqrt(0.5)*sqrt(Vneyman)
1.96*2*0.04320547/sqrt(0.5)+1.645*2*0.04320547/sqrt(0.5)
0.4405437/0.098
^2
4.495344^2
print(sqrt(Vneyman))
var(ate)
Vneyman
1.962*0.03055088/sqrt(0.5)+1.645*2*0.03055088/sqrt(0.5)
0.2269151/0.098
1.962*0.03055088/sqrt(0.5)+1.28*2*0.03055088/sqrt(0.5)
qnorm(0.9)
qnorm(1-0.5/2)
(1.281552+0.6744898)^2
(0.098/0.03055)^2*0.5^2
3.8261/2.572585
qnorm(1-0.05/2)
(1.959964+1.281552)^2
(0.098/0.03055)^2
(0.098/0.03055)^2*0.5*0.5
(1.96+1.28)^2
((1.96+1.28)*0.0305)^2
0.009765392/(0.09^2*0.5^2)
s_c
1/2*(s_c+s_t)
1/2*((s_c)^2+(s_t)^2)
sqrt(s_t)
apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1)))
logic_test <- apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1)))
dim(perms)
dim(logic_test)
logic_test <- apply(perms, 2,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1)))
logic_test <- apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1)))
logic_test <- apply(perms, 1,function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1)))
rownumber <- apply(logic_test, 2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
observed_test
rownumber
rownumber==TRUE
rownumber <- apply(logic_test, 2, sum)
rownumber
rownumber == 8
test_statistic
sum(larger_than_observed)
?as.vector
a <- c(1,2,3,4,5,6,7,8)
as.vector(a)
simul_stat
rm(simul_stat)
simul_stat <- as.vector(NULL)
is.vector(c)
is.vector(a)
c
?set.seed
str(schools)
?as.numeric
as.numeric(a)
b <- (TRUE, FALSE, TRUE, TRUE, FALSE)
b <- ("TRUE", "FALSE", "TRUE", "TRUE", "FALSE")
b <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
as.numeric(b)
?rank
rank(a)
a <- c(12,45,22,12,56,39)
rank(a)
str(schools)
str(schools$treatment_rand)
str(rank(schools$rand)<=49)
summary(schools$rand)
rm(list=ls())
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
set.seed(1001)
str(schools)
schools$rand <- runif(100,min=0,max=1)
rank(schools$rand)<=49
schools&rand
schools$rand
as.numeric(rank(schools$rand)<=49)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand <- 1-schools$treatment_rand
?append
str(schools$open)
schools$rand*schools$open
simul_stat
dim(simul_stat)
?NROW
str(schools)
schools$control = 1-schools$treatment
schools$control
schools$control_rand
str(schools)
rm(list=ls())
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
set.seed(1001)
schools$treatment
str(schools)
schools$control <- 1-schools$treatment
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49) #pick the first 49 numbers
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
set.seed(1001)
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49) #pick the first 49 numbers
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
