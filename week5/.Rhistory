rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "blue", lwd = 3, xlab = "")
#Exercise 1: Create cdf of exponential distribution
rm(list = ls())
#Step 1: Generate uniform distribution U[0,1] random variable
u <- runif(10000,0,1)
#Step 2: Construct pdf
##Approach 1: Use the fact that we can transform a uniform distribution U[0,1] random variable by the inverse of a cdf and get a random variable with that cdf
#We know the if Y is an exponential distribution RV, x = F(y) = 1 - e^(-lambda * y). Hence, the inverse function of cdf is y = - log(1-x)/ lambda. Since X and 1-X has the same distribution, we can write Y = -log(X)/lambda.
#Define the inverse cdf.Note that X is a random variable from uniform distribution u
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
hide <- dev.off()
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "blue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
hide <- dev.off()
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "yellow", lwd = 3, xlab = "")
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
hide <- dev.off()
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
hide <- dev.off()
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", fill = rgb(1,0,0.5,0.8), lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = rgb(1,0,0.5,0.8), lwd = 3, xlab = "")
?dhyper
dhyper(5,13,39,10)
?pexp
?dnorm
v <- rnorm(1000,3,0.25)
dnorm(0,0,0.5)
pnorm(1.96,0,1)
qnorm(0.975,0,1)
qnorm(0.975,lower.tail = FALSE)
qnorm(0.975,0,1)
y_qnorm <- qnorm(u)
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
plot(density_y_qnorm, type = "l", xlim = c(0,2), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(0,2), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.2,0.8,1,0.7), lwd = 3, xlab = "")
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
rm(list=ls())
u <- runif(10000,0,1)
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = rgb(0.3,0.5,0.4,0.8), lwd = 3, xlab = "")
y_rnorm <- rnorm(10000,0,1)
density_y_rnorm <- density(y_rnorm, bw = 1)
pdf("random_norma.pdf")
hide <- dev.off()
plot(density_y_rnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution from random draw", col = rgb(0.4,0.5,0.8,0.7), lwd = 3, xlab = "")
p1 <- hist(estimator_mean, breaks = 100)
estimator_mean <- 2*apply(simulations, 1, mean)
#Set theta = 5
assumed_theta <- 5
#Sample size = 100
sample_size <- 100
#Run 100000 simulations
no_of_simulations <- 100000
#Create a matrix of random generation of uniform distribution (100 * 100000 observations) in which each row consists of 100 observations within a sample. There are 100 columns as a result
simulations <- matrix(runif(sample_size * no_of_simulations, max = assumed_theta), nrow = no_of_simulations)
#To estimate theta, assume that estimator of theta = 2 * sample mean of the uniform distirbution, i.e., finding mean across columns within a row of the matrix simulations
estimator_mean <- 2*apply(simulations, 1, mean)
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = c(0.15), xlab = "values", ylab = "density")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0.15), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0.15), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0.15), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
hide <- dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
hide <- dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(2,8), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(2,8), xlab = "values", ylab = "density")
hide <- dev.off()
estimator_median <- 2 * apply(simluations, 1, median)
estimator_median <- 2 * apply(simulations, 1, median)
p2 <- hist(estimator_median, breaks = 100)
p2$mean = p2$density
p2$counts = p2$density
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$mean = p1$density
p2$counts = p2$density
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
p1 <- hist(estimator_mean, breaks = 100)
str(p1)
first_row <- simulations[1,]
dim(first_row)
str(first_row)
mean(first_row)
median(first_row)
?break
?breaks
?histogram
?hist
range <- range(p1$mids, p2$mids )
str(range)
dim(range)
str(range)
str(p1$mids)
str(p1$density)
str(p1$mean)
str(p2$counts)
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$mean = p1$density
p2$counts = p2$density
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = c(4,6), xlab = "values", ylab = "density")
dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
#Plot the histogram
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(3,7), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(0,0,1,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
hide <- dev.off()
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(0,0,1,1/2), xlim = range(0,15), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(0,0,1,1/2), xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
#Set theta = 5
assumed_theta <- 5
#Sample size = 100
sample_size <- 100
#Run 100000 simulations
no_of_simulations <- 100000
simulations <- matrix(runif(sample_size * no_of_simulations, max = assumed_theta), nrow = no_of_simulations)
estimator_mean <- 2*apply(simulations, 1, mean)
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
p1 <- hist(estimator_mean, breaks = 100)
str(p1$mean)
p1$mean
str(p1$density)
str(p2)
str(p2$counts)
str(p1$mids)
range <- range(p1$mids, p2$mids)
rm(p2)
#Plot the histogram
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
rm (list = ls())
setwd("/Users/nguyetanh/Documents/MITx-14.310x/week5/")
install.packages("mvtnorm")
library("mvtnorm")
#Set theta = 5
assumed_theta <- 5
#Sample size = 100
sample_size <- 100
#Run 100000 simulations
no_of_simulations <- 100000
#Create a matrix of random generation of uniform distribution (100 * 100000 observations) in which each row consists of 100 observations within a sample. There are 100 columns as a result
simulations <- matrix(runif(sample_size * no_of_simulations, max = assumed_theta), nrow = no_of_simulations)
#To estimate theta, assume that estimator of theta = 2 * sample mean of the uniform distirbution, i.e., finding mean across columns within a row of the matrix simulations
estimator_mean <- 2*apply(simulations, 1, mean)
#Plot the histogram
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
#Plot the histogram
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p3 <- hist(estimator_mean, breaks = 100)
rm(p3)
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
setwd("/Users/nguyetanh/Documents/MITx-14.310x/week5/")
install.packages("mvtnorm")
library("mvtnorm")
assumed_theta <- 5
sample_size <- 100
no_of_simulations <- 100000
simulations <- matrix(runif(sample_size * no_of_simulations, max = assumed_theta), nrow = no_of_simulations)
estimator_mean <- 2*apply(simulations, 1, mean)
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf)
p1 <- hist(estimator_mean, breaks = 100)
p1 <- hist(estimator_mean, breaks = 100)
p1 <- hist(estimator_mean, breaks = 100)
rm(p1)
p1 <- hist(estimator_mean, breaks = 100)
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = rgb(1,0,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
hide <- dev.off
plot(p1, col = rgb(1,0,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
p1$mean = p1$density
plot(p1, col = rgb(1,0,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
plot(p1, col = rgb(1,0,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
rm(p1)
plot(hist(estimator_mean, breaks = 100), col = rgb(1/5,1/4,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
plot(hist(estimator_mean, breaks = 100), col = rgb(1/5,1/4,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
plot(hist(estimator_mean, breaks = 100), col = rgb(1/5,1/4,0,1/2), xlim = c(4,6), xlab = "values", ylab = "density")
p1 <- hist(estimator_mean, breaks = 100)
rm(list = ls())
setwd("/Users/nguyetanh/Documents/MITx-14.310x/week5/")
install.packages("mvtnorm")
install.packages("mvtnorm")
library("mvtnorm")
assumed_theta <- 5
sample_size <- 100
no_of_simulations <- 100000
simulations <- matrix(runif(sample_size * no_of_simulations, max = assumed_theta), nrow = no_of_simulations)
estimator_mean <- 2 * apply(simulations, 1, mean)
p1 <- hist(estimator_mean, breaks = 100)
pdf("Histogram_mean")
plot(p1, col = "blue", xlim = c(4,6), xlab = "values", ylab = "density")
dev.off()
p1 <- hist(estimator_mean, breaks = 100)
pdf("Histogram_mean")
plot(p1, col = "blue", xlim = c(4,6), xlab = "values", ylab = "density")
dev.off()
rm(list = ls())
#Set theta = 5
assumed_theta <- 5
#Sample size = 100
sample_size <- 100
#Run 100000 simulations
no_of_simulations <- 100000
#Create a matrix of random generation of uniform distribution (100 * 100000 observations) in which each row consists of 100 observations within a sample. There are 100 columns as a result
simulations <- matrix(runif(sample_size * no_of_simulations, max = assumed_theta), nrow = no_of_simulations)
#To estimate theta, assume that estimator of theta = 2 * sample mean of the uniform distirbution, i.e., finding mean across columns within a row of the matrix simulations
estimator_mean <- 2*apply(simulations, 1, mean)
#Plot the histogram
p1 <- hist(estimator_mean, breaks = 100)
p1$mean = p1$density
p1 <- hist(estimator_mean, breaks = 100)
p1
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
pdf("Histogram_mean.pdf")
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
hide <- dev.off()
plot(p1, col = "blue", xlim = range(3,7), xlab = "values", ylab = "density")
#Exercise 1: Construct pdf of exponential distribution
rm(list = ls())
#Step 1: Generate uniform distribution U[0,1] random variable
u <- runif(10000,0,1)
#Step 2: Construct pdf
##Approach 1: Use the fact that we can transform a uniform distribution U[0,1] random variable by the inverse of a cdf and get a random variable with that cdf
#We know the if Y is an exponential distribution RV, x = F(y) = 1 - e^(-lambda * y). Hence, the inverse function of cdf is y = - log(1-x)/ lambda. Since X and 1-X has the same distribution, we can write Y = -log(X)/lambda.
#Define the inverse cdf.Note that X is a random variable from uniform distribution u
inverse_cdf1 <- function(x,lambda) -log(x)/lambda
y <- inverse_cdf1(u,3)
#Find the distribution of y. Function density computes kernel density estimate
density_y <- density(y)
#Plot the pdf: pdf starts the graphic driver for producing pdf graphics
pdf("exponential.pdf")
hide <- dev.off()
plot(density_y, type = "l", xlim = c(0,2), main = "pdf of inverse exp", col = "blue", lwd = 3, xlab = "")
##Approach 2: Plot the inverse of cdf of the exponential using qexp - inverse of cdf (pexp)
pdf("inverse_exponential.pdf")
y_qexp <- qexp(u, rate = 3)
density_y_qexp <- density(y_qexp)
hide <- dev.off ()
plot(density_y_qexp, type = "l", xlim = c(0,2), main = "pdf of inverse exponential function", col = "yellow", lwd = 3, xlab = "")
##Approach 3: Compare to random draws straight from the exponential distribution. Function rexp - random generation from exponential distribution
pdf("random_draw.pdf")
y_rexp <- rexp(10000, rate = 3)
density_y_rexp <- density(y_rexp)
hide <- dev.off()
plot(density_y_rexp, type = "l", xlim = c(0,2), main = "random draw from exp distribution", lwd = 3, col = "red", xlab = "")
#*** NOte: Need to clarify the dev.off(). Without this, plots do not show up???
#*** NOte: Approach 1 and 2 use inverse sampling method
#Excercise 2: Consider a deck of 52 cards. Suppose that you sample 10 cards from the deck without replacing the cards. What is the probability that exactly five of the cards are hearts?
#Compute density of a hypergeometric distribution
dhyper(5,13,39,10)
#Excercise 3: Functions associated with ormal distribution
#Generate 1000 number from a normal with mean = 3, sd = 0.25
v <- rnorm(1000,3,0.25)
#Probability density function - find the hieght of the normal with mean = 0 and sd = 0.5
dnorm(0,0,0.5)
#Cumulative Distribution Function - Area under the standard normal curve to the left of 1.96. Lower.tail = FALSE is default - what is to the right
pnorm(1.96,0,1)
#Quantile function is the inverse of pnorm. Find the value at which cdf of standard normal is 0.975
qnorm(0.975,0,1)
#Excercise 4: Plot pdf of normal distribution
##Approach 1: Inverse sampling method
y_qnorm <- qnorm(u)
density_y_qnorm <- density(y_qnorm, bw = 1)
pdf("normal.pdf")
hide <- dev.off()
plot(density_y_qnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution", col = "navyblue", lwd = 3, xlab = "")
##Approach 2: Random generation from normal distribution
y_rnorm <- rnorm(10000,0,1)
density_y_rnorm <- density(y_rnorm, bw = 1)
pdf("random_norma.pdf")
hide <- dev.off()
plot(density_y_rnorm, type = "l", xlim = c(-5,5), main = "pdf of normal distribution from random draw", col = rgb(0.4,0.5,0.8,0.7), lwd = 3, xlab = "")
y <- function(x) x/10 + 2
plot(x,y)
plot(y)
